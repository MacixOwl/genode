#
# Build
#

# assert_spec x86

# perform write tests when requested
if {[info exists env(GENODE_TEST_WRITE)]} {
set test_write 1
} else {
set test_write 0
}

set is_qemu         [have_include power_on/qemu]
set is_old          [expr [have_spec fiasco] || [have_spec okl4] || [have_spec pistachio]]
set is_32bit_x86_hw [expr !$is_qemu && [have_spec 32bit]]

#
# Only run tests on supported platforms
#
if {[expr [have_spec linux] || $is_32bit_x86_hw || [expr $is_qemu && $is_old]]} {
	puts "This run script is not supported on this platform."
	exit 0
}

#
# Qemu and on certain platforms only use the small set of tests
#
set small_test [expr $is_qemu || [have_spec foc] || [have_spec sel4]]

#
# Check used commands
#
set dd [installed_command dd]




set build_components {
	core init timer lib/ld
	server/report_rom
	app/pci_decode
	drivers/acpi
	drivers/platform
	drivers/nvme
	block_nvme/client 
}

build $build_components


catch { exec $dd if=/dev/zero of=bin/nvme.raw bs=1M count=0 seek=32768 }

create_boot_directory

#
# Generate config
#

install_config {
<config>
	<parent-provides>
		<service name="ROM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="7000"/>

	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Timer"/> </provides>
	</start>

	<start name="report_rom">
		<resource name="RAM" quantum="2M"/>
		<provides> <service name="Report"/> <service name="ROM"/> </provides>
		<config>
			<policy label="pci_decode -> system"    report="acpi_drv -> acpi"/>
			<policy label="platform_drv -> devices" report="pci_decode -> devices"/>
		</config>
	</start>
	
	<start name="acpi_drv" caps="350">
		<resource name="RAM" quantum="4M"/>
		<route>
			<service name="Report"> <child name="report_rom"/> </service>
			<service name="IO_MEM"> <parent/> </service>
			<service name="LOG">    <parent/> </service>
			<service name="PD">     <parent/> </service>
			<service name="RM">     <parent/> </service>
			<service name="CPU">    <parent/> </service>
			<service name="ROM">    <parent/> </service>
		</route>
	</start>

	<start name="pci_decode" caps="350">
		<resource name="RAM" quantum="2M"/>
		<route>
			<service name="Report">             <child name="report_rom"/> </service>
			<service name="ROM" label="system"> <child name="report_rom"/> </service>
			<service name="IO_MEM"> <parent/> </service>
			<service name="LOG">    <parent/> </service>
			<service name="PD">     <parent/> </service>
			<service name="RM">     <parent/> </service>
			<service name="CPU">    <parent/> </service>
			<service name="ROM">    <parent/> </service>
		</route>
	</start>

	<start name="platform_drv" caps="100" managing_system="yes">
		<resource name="RAM" quantum="2M"/>
		<provides>
			<service name="Platform"/>
		</provides>
		<route>
			<service name="ROM" label="devices"> <child name="report_rom"/> </service>
			<service name="Report"> <child name="report_rom"/> </service>
			<service name="IRQ">     <parent/> </service>
			<service name="IO_MEM">  <parent/> </service>
			<service name="IO_PORT"> <parent/> </service>
			<service name="ROM">     <parent/> </service>
			<service name="PD">      <parent/> </service>
			<service name="CPU">     <parent/> </service>
			<service name="LOG">     <parent/> </service>
			<service name="Timer"> <child name="timer"/> </service>
		</route>
		<config>
			<report devices="yes"/>
			<policy label="nvme_drv -> " info="yes"> <pci class="NVME"/> </policy>
		</config>
	</start>

	<start name="nvme_drv" caps="1200">
		<resource name="RAM" quantum="24M"/>
		<provides> <service name="Block"/> </provides>
		<config max_hmb_size="16M" verbose_regs="yes" verbose_identify="yes">
			<policy label_prefix="block_nvme_client" writeable="yes"/>
		</config>
		<route>
			<service name="Platform"><child name="platform_drv"/> </service>
			<service name="Timer">   <child name="timer"/>        </service>
			<service name="CPU">     <parent/>                    </service>
			<service name="ROM">     <parent/>                    </service>
			<service name="PD">      <parent/>                    </service>
			<service name="LOG">     <parent/>                    </service>
		</route>
	</start>


	<start name="block_nvme_client" caps="1000">
		<resource name="RAM" quantum="128M"/>
		<route>
			<service name="Block"> <child name="nvme_drv"/> </service>
			<any-service> <parent/> <any-child /> </any-service>
		</route>
	</start>
</config>}

#
# Boot image
#

# build_boot_image { core ld.lib.so init timer block_client }

# append qemu_args " -nographic "

# run_genode_until "rpc test completed.*\n" 90

build_boot_image [build_artifacts]

append qemu_args " -nographic "
append qemu_args " -device pcie-root-port,id=root_port1 "
append qemu_args " -drive id=nvme0,file=bin/nvme.raw,format=raw,if=none "
append qemu_args " -device nvme,drive=nvme0,serial=fnord,id=nvme0n1,bus=root_port1 "

run_genode_until {.*test finished*\n} 300